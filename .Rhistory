all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
with(swiss, cor(Examination, Education))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <-  swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
SB
sB
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
((fit$coef[2])-(fit$coef[3]))/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- with(hunger, lm(Numeric ~ Sex=="Female"))
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
q()
ls()
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
dance_start(value = FALSE, contents = FALSE)
library(swirl)
swirl()
fit <- with(out2, lm(y ~ x)
)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sum(residuals(fit)^2)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1*sqrt(1-hatvalues(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fit, out2) predict(fitno, out2)-
predict(fit, out2) - predict(fitno, out2)-
)
predict(fit, out2) - predict(fitno, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
library(datasets)
data <- data(mtcars)
head(data)
head(mtcars)
ls()
rm()
ls()
?rm
rm(all())
head(data)
View(data)
view(mtcars)
View(mtcars)
summary(mtcars)
names(mtcars)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- with(Swiss, lm(Fertility ~ Agriculture))
fit1 <- Swiss, lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "Binomial", ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", ravenData)
lodds <- predict(mdl,data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
ntx()
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, family = "poisson", offset = qpois(.95, lambda), data = hits)
mdl2 <- glm(visits ~ date, family = "poisson", offset = log(visits+1), data = hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(AppliedPredictiveModeling)
install(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(caret)
install.packages("caret")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
installed.packages("Rcpp")
?Rcpp
?createDataPartition
??createDataPartition
View(adData)
table(adData$diagnosis)
testIndex = createDataPartition(adData$diagnosis, p = 0.50,list=FALSE)
version(caret)
packageVersion(caret)
packageVersion("caret")
library(swirl)
swirl()
install_from_swirl("DataScientistToolbox")
install_from_swirl("Data Scientist Toolbox")
install_from_swirl("Data_Scientist_Toolbox")
data("iris")
View(iris)
library(caret)
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species, p=.7, list = TRUE)
training <- iris[inTrain,]
training <- iris$Species[inTrain,]
View(inTrain)
inTrain <- createDataPartition(y=iris$Species, p=.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
View(inTrain)
dim(training)
modFie <- with(training, train(Species ~ ., method="rf", prox=TRUE))
modFit <- train(Species ~ ., method="rf", prox=TRUE, data=training)
modifit
modFit
predict(modFit, newdata = testing)
cbind(testting, predict(modFit, newdata = testing))
cbind(testing, predict(modFit, newdata = testing))
precdiction <- cbind(testing, predict(modFit, newdata = testing))
dim(prediction)
dim(precdiction)
View(precdiction)
?confusionMatrix
confusionMatrix(predict(modFit, newdata = testing))
confusionMatrix(predict(modFit, newdata = testing), testing)
View(testing)
View(predict(modFit, newdata = testing))
confusionMatrix(predict(modFit, newdata = testing), testing$Species)
library(ASLR)
install.packages("ASLR")
install.packages("ISLR")
library(ISLR)
library(ggplot2)
data("Wage")
Wage <- subset(select = -c(logWage))
View(Wage)
Wage <- Wage[,-logwage]
view(Wage$logwage)
View(Wage$logwage)
head(Wage[,10])
Wage <- Wage[,-10]
inTrain <- createDataPartition(y=Wage$wage, p=.0, list=FALSE)
training <- Wage[inTrain]
testing <- Wage[-inTrain]
View(testing)
View(inTrain)
inTrain <- createDataPartition(y=Wage$wage, p=.7, list=FALSE)
View(inTrain)
training <- Wage[inTrain]
testing <- Wage[-inTrain]
View(testing)
view(training)
View(training)
modFit <- train(wage ~ ., method = "gbm", data = training, verbose = FALSE)
View(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method = "gbm", data = training, verbose = FALSE)
warnings()
print(modFit)
qplot(predict(modFit, newdata = testing), wage, data = testing)
setwd(/Users/fgashakamba/Desktop/RTN-RDB/MachLearn/Prog_Assign)
setwd("/Users/fgashakamba/Desktop/RTN-RDB/MachLearn/Prog_Assign")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
set.seed(12345)
training <- read.csv("pml-training.csv")
View(training)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
View(testing)
dim(testing)
dim(training)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
dim(training)
dim(testing)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myDataNZV <- nearZeroVar(training, saveMetrics=TRUE)
myNZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
myDataNZV <- nearZeroVar(training, saveMetrics=TRUE)
myNZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
training <- training[!myNZVvars]
dim(training)
training <- training[c(-1)]
trainingV3 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(training[i]), names(trainingV3)[j]) ) ==1)  {
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
dim(trainingV3)
trainingV3 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(training[i]), names(trainingV3)[j]) ) ==1)  {
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
training <- trainingV3
rm(trainingV3)
clean1 <- colnames(training)
clean2 <- colnames(training[, -58])
testing <- testing[clean1]
clean1 <- colnames(training)
clean2 <- colnames(training[, -58]) #already with classe column removed
testing <- testing[clean1]
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for (i in 1:length(testing)) {
for(j in 1:length(training)) {
if(length(grep(names(training[i]), names(testing[j])) ==1)  {
for (i in 1:length(testing)) {
for(j in 1:length(training)) {
if(length(grep(names(training[i])), names(testing[j])) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
for(i in 1:length(testing) ) {
for(j in 1:length(training)) {
if(length( grep(names(training[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(training[i])
}
}
}
#Removing the ID column as we did for the training dataset
testing <- testing[c(-1)]
#coerce the testing and training data into the same type
for(i in 1:length(testing) ) {
for(j in 1:length(training)) {
if(length( grep(names(training[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(training[i])
}
}
}
dim(training)
dim(testing)
set.seed(12345)
modFA1 <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(modFA1)
predictA1 <- predict(modFA1, testing, type = "class")
cmtree <- confusionMatrix(predictA1, Test$classe)
predictA1 <- predict(modFA1, testing, type = "class")
cmtree <- confusionMatrix(predictA1, testing$classe)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
dim(training)
dim(testing)
myDataNZV <- nearZeroVar(training, saveMetrics=TRUE)
myNZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
training <- training[!myNZVvars]
dim(training)
training <- training[c(-1)]
trainingV3 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(training[i]), names(trainingV3)[j]) ) ==1)  {
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
training <- trainingV3
rm(trainingV3)
predictA1 <- predict(modFA1, testing, type = "class")
cmtree <- confusionMatrix(predictA1, testing$classe)
dim(training)
dim(testing)
View(training)
View(testing)
class(testing$classe)
class(training$classe)
1:length(testing
1:length(testing)
names(testing)
names(training)
data.fram(names(training))
data.frame(names(training))
write.csv(data.frame(names(training)), "training_names.csv")
write.csv(data.frame(names(testing)), "testing_names.csv")
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
set.seed(12345)
modFA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFA1)
predictA1 <- predict(modFA1, myTesting, type = "class")
cmtree <- confusionMatrix(predictA1, myTesting$classe)
dim(myTesting)
dim(myTraining)
names(myTesting)
names(myTraining)
class(myTesting$classe)
class(myTraining$classe)
set.seed(12345)
modFA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFA1)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
set.seed(12345)
rf_Fit <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(rf_Fit)
pred_Rf <- predict(rf_Fit, myTesting, type = "class")
cmtree <- confusionMatrix(pred_Rf, myTesting$classe)
?predict
pred_Rf <- predict(rf_Fit, newdata = myTesting)
conf_tree <- confusionMatrix(pred_Rf, myTesting$classe)
dim(pred_Rf)
names(pred_Rf)
View(pred_Rf)
set.seed(12345)
rf_Fit <- train(classe ~ ., data=myTraining, method="rpart")
fancyRpartPlot(rf_Fit)
set.seed(12345)
rf_Fit <- train(classe ~ ., data=myTraining, method="rpart")
#fancyRpartPlot(rf_Fit)
pred_Rf <- predict(rf_Fit, newdata = myTesting)
conf_tree <- confusionMatrix(pred_Rf, myTesting$classe)
pred_Rf <- predict(rf_Fit, newdata = myTesting)
conf_tree <- confusionMatrix(pred_Rf, myTesting$classe)
set.seed(12345)
rf_Fit <- train(classe ~ ., data=myTraining, method="rpart")
#fancyRpartPlot(rf_Fit)
set.seed(12345)
rf_Fit <- train(classe ~ ., data=myTraining, method="rpart")
#fancyRpartPlot(rf_Fit)
pred_Rf <- predict(rf_Fit, newdata = myTesting)
conf_tree <- confusionMatrix(pred_Rf, myTesting$classe)
View(pred_Rf)
class(pred_Rf)
View(myTesting$classe)
class(myTesting$classe)
pred_Rf <- predict(rf_Fit, newdata = myTesting)
conf_tree <- confusionMatrix(pred_Rf, as.factor(myTesting$classe))
conf_tree
